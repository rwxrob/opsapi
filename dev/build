#!/usr/bin/env bash

set -e

export GENVERS=6.0.1
export GO_POST_PROCESS_FILE="/usr/bin/env go fmt"
export SPECFILE=../openapi.yaml
export GENDIR="${0%/*}/../server"
export TMPLDIR="${0%/*}/template"
export INTERNAPI="${0%/*}/../server/internal/api"

# --------------------- tab completable commands ---------------------

x.fetch.jar ()
{
  local url="https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/$GENVERS/openapi-generator-cli-$GENVERS.jar"
  curl -L "$url"
}

x.check.deps ()
{
  local -i fails
  x.check.bash || ( echo "ðŸ’€ Failed bash check" && ((fails++)) )
  x.check.go || ( echo "ðŸ’€ Failed go check" && ((fails++)) )
  x.check.java || ( echo "ðŸ’€ Failed java check" && ((fails++)) )
  x.check.curl || ( echo "ðŸ’€ Failed curl check" && ((fails++)) )
  (( fails == 0 )) && echo "ðŸŽ‰ All build dependencies met ðŸ‘Œ"
}

x.check.bash ()
{
  (( ${BASH_VERSION:0:1} >= 4 )) && \
  printf "%-20s âœ…\n" "Bash Version: ${BASH_VERSION:0:1}"
}

x.check.curl ()
{
  local -a versa
  mapfile versa < <(curl -V 2>&1)
  if [[ "${versa[0]}" =~ ^[^\ ]+\ ([^\ ]+) ]]; then
    printf "%-20s âœ…\n" "Curl Version: ${BASH_REMATCH[1]}"
    return 0
  else
    return 1
  fi
}

x.check.go ()
{
  local vers
  vers=$(go version)
  [[ "$vers" =~ ^[^\ ]+\ [^\ ]+\ go1\.([^\ \.]+) ]] &&
    (( ${BASH_REMATCH[1]} >= 18 )) &&
    printf "%-20s âœ…\n" "Go Version: ${BASH_REMATCH[1]}"
}

x.check.java ()
{
  local jvers
  jvers=$(java -version 2>&1 | head -1)
  jvers=${jvers#*version \"}
  jvers=${jvers%%\"*}
  if [[
    $jvers =~ ^(1\.[89]|9\.|[1-9][0-9]+) ]]; then
    printf "%-20s âœ…\n" "Java Version: $jvers"
    return 0
  else
    return 1
  fi
}

x.validate ()
{
  local file=${1:-$SPECFILE}
  x.run validate -i "$file" --recommend
}

x.run ()
{
  java -jar openapi-generator-cli.jar "$@"
}

x.server ()
{
  x.run generate -g go-gin-server -i "$SPECFILE" -o "$GENDIR" -t "$TMPLDIR"
  x.init.api
  x.addgomod
}

x.addgomod ()
{
  cd "$GENDIR"
  go mod init github.com/rwxrob/opsapi
  go work init
  go work use .
  go get -u
  printf "%s\n" go.work go.work.sum > .gitignore
  cd -
}

x.init.api () {
  [[ -d "$INTERNAPI" ]] && return 0
  mkdir -p "$INTERNAPI"
  cat <<END > "$INTERNAPI/api.go"
package api

import (
	"log"

	"github.com/gin-gonic/gin"
)

func Handle(c *gin.Context, op string) {
	log.Println("would handle %v", op)
}
END
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    declare cmd
    cmd=$(command -v "x.$c")
    if [[ $c == "$CMD" && -n "$cmd" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

